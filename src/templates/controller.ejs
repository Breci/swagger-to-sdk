<%
const replaceParamsInUrl = (url, params)=> {
    let str = url;
    for (const param of params) {
        if (param.in === "path"){
            str = str.replace(`{${param.name}}`, `$\{${param.name}\}`);
        }
    }
    return str;
}

function camelCase(string) {
    return string.replace(/-([a-z])/gi, function (all, letter) {
        return letter.toUpperCase();
    });
}

function orderParams(params, url){
    const orderedParams =  [...params]
    orderedParams.sort((a,b)=>{
        if (a.required && !b.required) return -1
        else if (b.required && !a.required) return 1

        if (a.in === "path"){
            //TODO detect position in URL to match the order
            if (b.in ==="path"){
                if (url){
                    const aIndex = url.indexOf(`{${a.name}}`)
                    const bIndex = url.indexOf(`{${b.name}}`)
                    return aIndex - bIndex;
                }
                return 0
            } 
            else if (b.in ==="query") return -1
            else if (b.in ==="header") return -1
            else if (b.in ==="cookie") return -1
        }
        else if (a.in === "query"){
            if (b.in ==="path") return 1
            else if (b.in ==="query") return 0
            else if (b.in ==="header") return -1
            else if (b.in ==="cookie") return -1
        }
        else if (a.in ==="header"){
            if (b.in ==="path") return 1
            else if (b.in ==="query") return 1
            else if (b.in ==="header") return 0
            else if (b.in ==="cookie") return -1
        }
        else if (a.in === "cookie"){
            if (b.in ==="path") return 1
            else if (b.in ==="query") return 1
            else if (b.in ==="header") return 1
            else if (b.in ==="cookie") return 0
        }
    })
    return orderedParams
}

// TODO handle mixed types
function swaggerTypeToJSDocType(schema,refs){
    let type = schema.type;
    if (schema.$ref){
        const splitdRefName = schema.$ref.split("/")
        const schemaName = splitdRefName[splitdRefName.length -1]
        const schemaInfo = refs[schemaName]
        type = schemaInfo.type
    }
    
    switch(type){
        case "string":
            return "string"
        case "object":
            return "Object"
        case "number":
        case "integer":
            return "number"
        case "array":
            return "Array"
    }
}

function generateQueryParams(params = [],refs){
    const filteredParams =params.filter(param=>param.in === "query")
    const map = filteredParams.reduce((reducer,param)=>{
        if (param.schema.$ref){
            const splitdRefName = param.schema.$ref.split("/")
            const schemaName = splitdRefName[splitdRefName.length -1]
            const schemaInfo = refs[schemaName]
            
            if (schemaInfo.type ==="object"){
                const entries = Object.keys(schemaInfo.properties).reduce((reducer,key)=>{
                    return {
                        ...reducer,
                        [key]:`${camelCase(param.name)} ? ${camelCase(param.name)}.${key} : undefined`
                    }
                },{})
                return {
                    ...reducer,
                    ...entries
                }
            }
        }
        return{
            ...reducer,
            [param.name]: camelCase(param.name)
        }
    },{})
    return map
}
%>
import instance,{ generateAuthHeaders } from "../instance"

<% paths.forEach((path)=>{ %>
    
    /**
     ** <%= path.description%><% orderParams(path.parameters || [],path.url).forEach((param)=>{ %>
     ** @param <%= camelCase(param.name)%> {<%= swaggerTypeToJSDocType(param.schema, refs)%>}<% }); %>
     <% if(path.requestBody){%>** @param body {Object} <%}%>
    */
        
    export async function <%= path.operationId %> (<%= path.parameters? orderParams(path.parameters,path.url).map(param=>camelCase(param.name)) : ""  %> <%= path.parameters && path.requestBody ? ',' : '' %> <%= path.requestBody ? "body" : "" %>){
        const securities = <%- path.security? JSON.stringify(path.security.map(security=>Object.keys(security)),null,2) : '[]'%>;
        
        const authHeaders = generateAuthHeaders(securities[0]);
        const paramHeaders = {<%- path.parameters? path.parameters.filter(param=>param.in ==="header").map(param=>`"${param.name}" : ${camelCase(param.name)}` ).join(',') : ''%>}
        
      return instance.request({
         url: `<%=  replaceParamsInUrl(path.url,path.parameters ?  path.parameters.filter(param=>param.in === "path") : []) %>`,
         method: "<%= path.method %>",
        headers: {
            ...paramHeaders,
            ...authHeaders
        },
        params: {<%- Object.entries(generateQueryParams(path.parameters,refs)).map(([key,value])=>{
            return `${key}: ${value}`
    }) %> },
    <%= path.requestBody ? " data:  body" : "" %>
      }).then(response=>({
        data: response.data,
        statusCode: response.status
    }))
    }
<% }); %>